@model deneme.Models.Kullanici

@{
    ViewBag.Title = "Kayıt Ol";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid" style="text-align: center;">
    <h1 class="navbar-brand" style="text-align: center;">Kullanıcı Kayıt Formu</h1>
</div>



@using (Html.BeginForm("Ekle_Duzenle", "User", FormMethod.Post,new { enctype ="multipart/form-data" })) 
{
    @Html.AntiForgeryToken()

<div class="row">

    <div class="col-md-3">
        @(Html.Kendo().Calendar().Name("Tarih"))
    </div>

    <div class="col-md-5">

        <div class="form-horizontal">

            @if ((string)TempData["Referrer"] == "ErrorMessage")
            {
                <div class="alert alert-danger">
                    <strong>Hatalı işlem. Lütfen tekrar alanları gösterildiği gibi doldurunuz.</strong>
                </div>
                <script>
                    $(".alert").delay(2000).fadeOut("fast", function () { $(this).remove(); });
                </script>
            }

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.resim, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    <input id="ImagePath" title="Resiminizi yükleyiniz."
                           type="file" name="file" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.kullanici_adi, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.kullanici_adi, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.kullanici_adi, "nickname123", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.sifre, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.sifre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sifre, "", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.sifredogrula, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.sifredogrula, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sifredogrula, "", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ad, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ad, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ad, "", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.soyad, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.soyad, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.soyad, "", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.tel, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.tel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.tel, "5xxxxxxxxx", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-10" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control"}
                    })
                    @Html.ValidationMessageFor(model => model.email, "name@example.com", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.agree, "", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.agree, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.agree, "", new { @class = "badge badge-secondary text-wrap" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Gönder" id="btn_gonder" class="btn btn-outline-success my-2 my-sm-0">
                </div>
            </div>

        </div>

    </div>

    <div class="col-md-3">
       <h1>Baslık</h1>
    </div>
</div>
}

@*<div class=" k-content">
        <div id="validation-success"></div>

        @(Html.Kendo().Form<deneme.Models.Kullanici>()
                                                                        .Name("kayıt")
                                                                        .HtmlAttributes(new { action = "Ekle_Duzenle", Controller = "User", method = FormMethod.Post })
                                                                        .Validatable(v =>
                                                                        {
                                                                            v.ValidateOnBlur(true);
                                                                            v.ValidationSummary(vs => vs.Enable(false));
                                                                        })
                                                                        .Items(items =>
                                                                        {
                                                                            items.AddGroup()
                                                                            .Items(i =>
                                                                            {
                                                                                i.Add()
                                                                                    .Field(f => f.ad)
                                                                                    .Label(l => l.Text("Ad:"));
                                                                                i.Add()
                                                                                    .Field(f => f.soyad)
                                                                                    .Label(l => l.Text("Soyad:"));
                                                                                i.Add()
                                                                                    .Field(f => f.kullanici1)
                                                                                    .Label(l => l.Text("Kullanıcı Adı:"));
                                                                                i.Add()
                                                                                    .Field(f => f.sifre)
                                                                                    .Label(l => l.Text("Sifre:"))
                                                                                    .Hint("İpucu: yalnızca alfasayısal karakterler girin.")
                                                                                    .EditorTemplateHandler("setPasswordEditor");
                                                                                i.Add()
                                                                                    .Field(f => f.sifredogrula)
                                                                                    .Label(l => l.Text("Şifreyi Doğrulayın:"));
                                                                                i.Add()
                                                                                   .Field(f => f.email)
                                                                                   .Label(l => l.Text("Email:"));
                                                                                i.Add()
                                                                                   .Field(f => f.tel)
                                                                                   .Label(l => l.Text("Telefon:"));
                                                                                i.Add()
                                                                                    .Field(f => f.agree)
                                                                                    .Label(l => l.Text("Koşulları Kabul Ediyorum:"));
                                                                            });
                                                                        })
                                                                        .Events(ev => ev.ValidateField("onFormValidateField").Submit("onFormSubmit").Clear("onFormClear"))
        )

    </div>

    <script>
        function setPasswordEditor(container, options) {
            container.append($("<input type='password' class='k-textbox k-valid' id='Password' name='Password' title='Password' required='required' autocomplete='off' aria-labelledby='Password-form-label' data-bind='value:Password' aria-describedby='Password-form-hint'>"));
        }

        function onFormValidateField(e) {
            $("#validation-success").html("");
        }

        function onFormSubmit(e) {
            e.preventDefault();
            $("#validation-success").onFormSubmit();
        }

        function onFormClear(e) {
            $("#validation-success").html("");
        }
    </script>*@
